- Editor/LoadCSV.cs -> ToUsable()
° serve rimpiazzare punti?
° RemovePercentage non dovrebbe essere dentro a FirstIsQuote, che tra l'altro dovrebbe chiamarsi GetFloat, ma dovrebbero essere funzioni sommabili a cui tra l'altro potrebbero aggiungersene altre in futuro
° dovrebbe esserci la possibilità di scegliere tramite booleani cosa si preferisce fare (trova solo i float, rimuovi anche %, ecc..)

- Editor/LoadCsv.cs
° dovrebbe avere un LoadAndUpdateOrCreate, come avviene in capsize
° la funzione di lettura del csv dovrebbe chiamarsi CsvParse

- Editor/LoadSomething.cs 
° non mi piace la cosa dei numeri. Usare la prima riga (value[0]) per determinare quale valore sia in base al nome, indifferentemente dal numero della colonna
° si potrebbe fare che una volta trovati float, rimosse percentuali, ecc... si prendono i value[0] e si copiano in tutti gli altri.
Poi quando si riempie si fa un foreach(if contains("NOMEVALORE: ") replace ("NOMEVALORE: ", "") e parse in valore)
° dalla classe che viene riempita bisognerebbe creare scriptable object da inserire in game?

- Utility/Raycasts.cs
° è fatto unicamente per gravity project, andrebbe riadattato

- Pooling.cs
° metterlo anche come MonoBehaviour? Ha senso?
° trovare come mettere GameObject parametro generico T come per Component (così da mantenere l'inizializzazione Pooling<T> pooling = new Pooling<T>)
° InitCycle dovrebbe controllare se ci sono abbastanza elementi, ma solo tra quelli disattivati? In quel caso andrebbe modificato anche EndCycle

CameraBaseControl:
- aggiungere a CameraBaseControl anche l'override di Gravity_Project per poter girare in base alla gravità?
- in CameraBaseControl vedere se si riesce a rendere Local la rotazione della camera, invece che globale come ora. In teoria poi non c'è nemmeno più bisogno dell'override
(NB: sto utilizzando una camera che non è per forza figlia del player, quindi si controllerà sempre global, ma con dei calcoli come se fossi local)
- farla funzionare come cinemachine per la terza persona, perché per ora con l'offset si rompe quando si guarda in alto o in basso
(NB: guardare ControlloCamera presente in VoxBuster/voxelEngine/progettoBase/Script/Classi)
- aggiungere che collide coi muri o oggetti e si avvicina al player
- farla funzionare realmente con cinemachine???

UI Control:
- aggiungere negli event trigger una funzione per "snap"
  ° quando si clicca col mouse o touch, la scroll rect snappa verso il bottone, anche se magari è poco visibile
  ° o anche quando viene selezionato (così è utilizzabile anche da tastiera e pad)
- aggiungere nell'event system che quando si preme il tasto Cancel (nome inserito nell'inspector), si torna indietro
  ° tanto c'è già la lista dei bottoni da cui partire per ogni menù, si può dare per scontato che il loro parent sia l'oggetto da attivare
  ° oppure rimpiazzare con una lista di menù, così si attiva quello precedente e si disattiva quello corrente.
    Così facendo però non c'è più il bottone da cui partire, quindi o si lascia anche quello o si usa un foreach nei child Selectable, fino al primo con interactable true

===================================================================================================================================================================

EDIT DA CONTROLLARE:
- in pokemon non ho utilizzato SceneLoader come nelle utilities, ma agganciandosi al GameManager -> da controllare
- aggiornare letterbyletter - in pokemon ho messo che checka se la coroutine sta già andando e la stoppa
(NB: la voglio rendere generale, quindi probabilmente meglio un Dictionary di Text e la loro coroutine - è davvero meglio?)
- i tempi di letterbyletter metterli nell'UtilityMonobehaviour come in pokemon? Tanto in un gioco la velocità è uguale per tutte le scritte
(NB: in pokemon poi ho avuto bisogno di modificare il tempo di una sola scritta, quindi ho lasciato comunque le funzioni che richiedono il tempo come parametro)
- aggiungere il fade out e fade in della clip audio, come ho messo nell'audio manager di cube invaders
- aggiungere il controllo degli input di cube invaders ?